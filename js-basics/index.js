// TODO Chrome Dev Tools
/*
ПЕРЕМЕННЫЕ И ТИПИЗАЦИЯ
*/

/*
* Хойстинг переменной - когда её объявление "поднимается" в начало функции.
* Область видимости var:
** функция => хойстинг;
** глобальная область => добавляется в window.

* JS - слабо типизированный язык:
** не нужно определять тип переменной, он будет выведен
автоматически на основании присвоенного значения;
** можно использовать одну переменную для хранения
данных различных типов;
** при выполнении операций данные автоматически
приводятся к одному типу.

* Значение примитивного типа:
** не объект
** не имеет методов
** иммутабельно - не может быть изменено in-place
*/
// Использование метода строки не мутирует эту строку
var bar = "baz";
console.log(bar); // baz
// фактически выполнится new String(bar).toUpperCase()
bar.toUpperCase();
console.log(bar); // baz

/*
* 7 примитивов:
** Undefined
** Boolean
** Number
** String
** BigInt
** Symbol
** Null
* 1 непримитив:
** Object
* Функция - особый, вызываемый объект.
* Для встроенных объектов Array, Date, String, Number, Boolean и др. typeof вернет 'object'.
* Для объектов вместо оператора typeof используется instanceof - проверка наследования.
*/

/*
Undefined

* Значение undefined автоматически присваивается переменным, которые были объявлены без присвоения или аргументам 
функции, для которых не были переданы значения.
*/
if (typeof neverDeclared === "undefined") { } // OK
// if (neverDeclared === undefined) { } // ReferenceError

/*
Null

* null обозначает отсутствие значения у переменной; в отличие от undefined никогда не присваивается автоматически.
* null - последнее звено в цепочке прототипов, то есть от null унаследованы все остальные объекты
*/
Object.prototype.__proto__ // null
// Именно поэтому:
typeof null === "object" // true

/*
Шаблонные строки
*/
// Вставка значений в строку
const Chewbacca = 'Чубакка';
const str = `До свидания, ${Chewbacca}. Скучать без вас я
        буду.`;
console.log(str);
// Перенос строк без спец. символов
`
― Нужно спрятать этих детей, беречь.
― Увезем их туда, где ситхам не учуять их
присутствие.
― Разделить их следует.
`

/*
Number

* Number - числовой тип данных в формате 64-битного числа двойной точности с плавающей запятой.
* Безопасный диапазон: -(2^53-1)..(2^53-1)
* 0x... - hexadecimal (16-ричное), 0o... - octal (8-ричное), 0b... - binary (2-ичное)), 12e+3 - exponential

* Infinity - любое число ЗА ПРЕДЕЛАМИ 64-битного диапазона => при / 0 - всё норм.
*/
5 / Infinity // 0
-5 / Infinity // -0 из-за следования стандарту IEEE 754
typeof NaN // Number
NaN == NaN // false
Number.isNaN(Infinity % 5) // true